# Rate limiting configuration
limit_req_zone $binary_remote_addr zone=rpc_limit:10m rate=5r/s;

# Map RPC paths to their corresponding URLs
map $rpc_chain $rpc_service {
    default "";
    arbitrum-one "${ARBITRUM_ONE_RPC_URL}";
    ethereum "${ETHEREUM_RPC_URL}";
    arbitrum-one-tenderly "${ARBITRUM_ONE_TENDERLY_RPC_URL}";
}

server {
    listen       80 default_server;
    server_name  localhost;

    # DNS resolver configuration
    resolver 8.8.8.8 8.8.4.4 valid=30s;

    access_log  /var/log/nginx/host.access.log  main;

    # remove header 'Server'
    server_tokens off;

    # single page application
    # on request return file or index.html if file not found
    location = /index.html {
        expires -1;
        root   /usr/share/nginx/html;
        try_files /index.html =404;
    }

    # RPC proxy configuration
    location ~ /rpc/(?<rpc_chain>[^/]+) {
        limit_req zone=rpc_limit burst=20 nodelay;
        limit_req_status 429;
        
        if ($rpc_service = "") {
            return 404;
        }

        proxy_pass $rpc_service;
        proxy_ssl_server_name on;
        proxy_pass_request_headers on;
        proxy_pass_request_body on;
    }

    location / {
        expires 1y; # sets cache-control
        root   /usr/share/nginx/html;
        try_files $uri /index.html;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
        # Set this location as internal so it cannot be requested externally (will be 404, which returns to /index.html)
        internal;
    }
} 