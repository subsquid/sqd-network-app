### COMMON ###

query squidNetworkHeight {
  squidStatus {
    height
  }
}

query settings {
  settingsConnection(orderBy: id_ASC) {
    edges {
      node {
        id
        bondAmount
        delegationLimitCoefficient
        minimalWorkerVersion
        recommendedWorkerVersion
      }
    }
  }
}

### ACCOUNT ###

query account($address: String!) {
  accountById(id: $address) {
    id
    type
    balance
    owned {
      id
      type
      balance
    }
  }
}

### WORKERS ###

fragment WorkerFragment on Worker {
  id
  name
  peerId
  status
  createdAt
  bond
  claimableReward
  claimedReward
  uptime24Hours
  uptime90Days
  totalDelegation
  capedDelegation
  delegationCount
  apr
  stakerApr
  online
  jailed
  dialOk
  locked
  version
  jailReason
  owner {
    id
    type
  }
  realOwner {
    id
  }
}

fragment WorkerFullFragment on Worker {
  totalDelegationRewards
  website
  email
  description
  queries24Hours
  queries90Days
  scannedData24Hours
  scannedData90Days
  servedData24Hours
  servedData90Days
  storedData
  dayUptimes {
    timestamp
    uptime
  }
  owner {
    id
    type
  }
}

query allWorkers {
  workers(where: { status_eq: ACTIVE }) {
    ...WorkerFragment
  }
}

query workerByPeerId($peerId: String!, $address: String!) {
  workers(where: { peerId_eq: $peerId }, limit: 1) {
    ...WorkerFragment
    ...WorkerFullFragment
    myDelegations: delegations(where: { realOwner: { id_eq: $address } }) {
      deposit
      locked
      owner {
        id
        type
        balance
      }
    }
  }
}

query workerDaysUptimeById($id: String!, $from: DateTime!) {
  workerSnapshotsByDay(workerId: $id, from: $from) {
    timestamp
    uptime
  }
}

query myWorkers($address: String!) {
  workers(orderBy: id_ASC, where: { realOwner: { id_eq: $address }, status_not_eq: WITHDRAWN }) {
    ...WorkerFragment
    myDelegations: delegations(where: { realOwner: { id_eq: $address } }) {
      deposit
      locked
      owner {
        id
        type
        balance
      }
    }
  }
}

query myWorkersCount($address: String!) {
  workersConnection(orderBy: id_ASC, where: { realOwner: { id_eq: $address } }) {
    totalCount
  }
}

query myAssets($address: String!) {
  accounts(where: { id_eq: $address }) {
    balance
    owned {
      id
      balance
    }
  }
  workers(where: { realOwner: { id_eq: $address } }) {
    bond
    claimableReward
  }
  delegations(
    where: {
      realOwner: { id_eq: $address }
      AND: { OR: [{ deposit_gt: 0 }, { claimableReward_gt: 0 }] }
    }
  ) {
    claimableReward
    deposit
  }
}

query myDelegations($address: String!) {
  delegations(where: { realOwner: { id_eq: $address }, deposit_gt: 0 }) {
    claimableReward
    claimedReward
    deposit
    locked
    worker {
      ...WorkerFragment
    }
    owner {
      id
      type
    }
  }
}

query myClaimsAvailable($address: String!) {
  delegations(where: { realOwner: { id_eq: $address }, claimableReward_gt: 0 }) {
    claimableReward
    deposit
    worker {
      id
      name
      peerId
    }
    owner {
      id
      type
    }
  }
  workers(where: { realOwner: { id_eq: $address }, claimableReward_gt: 0 }) {
    id
    name
    peerId
    claimableReward
    owner {
      id
      type
    }
  }
}

### GATEWAYS ###

fragment GatewayFragment on Gateway {
  id
  name
  status
  description
  email
  endpointUrl
  website
  owner {
    id
    type
  }
  operator {
    stake {
      locked
    }
  }
  createdAt
}

query myGateways($address: String!) {
  gateways(orderBy: id_ASC, where: { owner: { id_eq: $address }, status_eq: REGISTERED }) {
    ...GatewayFragment
  }
}

query gatewayByPeerId($peerId: String!) {
  gatewayById(id: $peerId) {
    ...GatewayFragment
  }
}

fragment GatewayStakeFragment on GatewayOperator {
  account {
    id
    type
  }
  autoExtension
  stake {
    amount
    locked
    lockStart
    lockEnd
  }
  pendingStake {
    amount
    locked
    lockStart
    lockEnd
  }
}

query myGatewayStakes($address: String!) {
  gatewayOperators(where: { account: { id_eq: $address, OR: { owner: { id_eq: $address } } } }) {
    ...GatewayStakeFragment
  }
}

fragment VestingFragment on Account {
  id
  type
  balance
  owner {
    id
  }
}

query vestingByAddress($address: String!) {
  accountById(id: $address) {
    ...VestingFragment
  }
}
